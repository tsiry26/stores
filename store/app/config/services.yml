# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
parameters:
#    parameter_name: value

services:
  store.backend.twig.store_backend_extension:
  #Notre classe qui va étendre Twig
          class: store\BackendBundle\Twig\Extensions\StoreBackendExtension
          tags:
              - { name: twig.extension }

  store.backend.listener.authentification: # Nom du services
          #Nom de ma classe avec namespaces
          class: store\BackendBundle\Listener\AuthentificationListener

          #Nom des services injecté en constructeur de ma classe
          arguments: ["@doctrine.orm.entity_manager", "@security.context", "@store.backend.notification"]

          #Etende le mécanisme de sécurity au niveau de l'interaction login
          #avec un mécanisme d'écouteur
          tags:
              - { name: kernel.event_listener, event: security.interactive_login, method: onAuthentificationSuccess }

  #Nom du bundle et nom de la classe
  store.backend.email: #Nom du service
              class: store\BackendBundle\Email\Email #classe service
              arguments: ["@mailer", "@twig"] #service Swift Mailer et du service Twig

  #Nom du service
  store.backend.notification:
            #classe avec namespace
              class: store\BackendBundle\Notification\Notification
              arguments: ["@session"]

  store.backend.listener.product.persist:
              class: store\BackendBundle\Listener\ProductListener

              # Argument du constructeur
              # c'est le service de notification que l'on a crée juste en dessus
              # ATTENTION l'injection des dépendances se fait si mon service n'est pas déjà injecté.
              # notament par le tag qui est associ à un service
              arguments: ["@store.backend.notification"]

              # ma classe utilisera le mécanisme d'écouteur de symfony
              tags:

              #name: correspond au mécanisme ou ma classe sera affectée
              #et plus particulièrement au mécanisme d'écouteur de doctrine

              #event: sera l'événement déclencheur de mon service
              #et plus particulièrement à la modification d'un objet

              #methode: la méthode que sera appellé après déclenchement de mon event
              #et plus particulièrement la méthode appelé dans mon service: postUpdate()

              # Evenement à doctrine: (Lifecycle)
              # Doctrine à une liste exhaustive d'evenement appelé "LifeCydle"
              # Cycle de vie d'un objet en Doctrine
              # +preRemove
              # +postRemove
              # +prePersist quand je crée mon objet en base de donné
              # +postPersist
              # +preUpdate quand je modifie mon objet en base de donné
              # +postUpdate
              # +postLoad
              # +loadClassMetadata

                - { name: doctrine.event_listener, event: postUpdate, method: postUpdate }
                - { name: doctrine.event_listener, event: postPersist, method: postPersist }
                - { name: doctrine.event_listener, event: prePersist, method: prePersist }
                - { name: doctrine.event_listener, event: preUpdate, method: preUpdate }
# service_name:
#        class: AppBundle\Directory\ClassName
#        arguments: ["@another_service_name", "plain_value", "%parameter_name%"]
